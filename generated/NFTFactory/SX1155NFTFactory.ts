// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class SX1155NFTDeployed extends ethereum.Event {
  get params(): SX1155NFTDeployed__Params {
    return new SX1155NFTDeployed__Params(this);
  }
}

export class SX1155NFTDeployed__Params {
  _event: SX1155NFTDeployed;

  constructor(event: SX1155NFTDeployed) {
    this._event = event;
  }

  get deployedAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get uri(): string {
    return this._event.parameters[3].value.toString();
  }

  get admin(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get editor(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class SX1155NFTFactory extends ethereum.SmartContract {
  static bind(address: Address): SX1155NFTFactory {
    return new SX1155NFTFactory("SX1155NFTFactory", address);
  }

  deployNFTContract(
    _name: string,
    _symbol: string,
    _uri: string,
    _admin: Address,
    _editor: Address,
  ): Address {
    let result = super.call(
      "deployNFTContract",
      "deployNFTContract(string,string,string,address,address):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromString(_uri),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromAddress(_editor),
      ],
    );

    return result[0].toAddress();
  }

  try_deployNFTContract(
    _name: string,
    _symbol: string,
    _uri: string,
    _admin: Address,
    _editor: Address,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployNFTContract",
      "deployNFTContract(string,string,string,address,address):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromString(_uri),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromAddress(_editor),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DeployNFTContractCall extends ethereum.Call {
  get inputs(): DeployNFTContractCall__Inputs {
    return new DeployNFTContractCall__Inputs(this);
  }

  get outputs(): DeployNFTContractCall__Outputs {
    return new DeployNFTContractCall__Outputs(this);
  }
}

export class DeployNFTContractCall__Inputs {
  _call: DeployNFTContractCall;

  constructor(call: DeployNFTContractCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _uri(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _admin(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _editor(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class DeployNFTContractCall__Outputs {
  _call: DeployNFTContractCall;

  constructor(call: DeployNFTContractCall) {
    this._call = call;
  }

  get newSx1155(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
