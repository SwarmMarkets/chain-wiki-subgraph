// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get isApproved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CommentRemoved extends ethereum.Event {
  get params(): CommentRemoved__Params {
    return new CommentRemoved__Params(this);
  }
}

export class CommentRemoved__Params {
  _event: CommentRemoved;

  constructor(event: CommentRemoved) {
    this._event = event;
  }

  get removedBy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get comment(): string {
    return this._event.parameters[2].value.toString();
  }

  get commentId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Commented extends ethereum.Event {
  get params(): Commented__Params {
    return new Commented__Params(this);
  }
}

export class Commented__Params {
  _event: Commented;

  constructor(event: Commented) {
    this._event = event;
  }

  get commentator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get comment(): string {
    return this._event.parameters[2].value.toString();
  }

  get commentId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ContractURISet extends ethereum.Event {
  get params(): ContractURISet__Params {
    return new ContractURISet__Params(this);
  }
}

export class ContractURISet__Params {
  _event: ContractURISet;

  constructor(event: ContractURISet) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get uri(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class ForceBurn extends ethereum.Event {
  get params(): ForceBurn__Params {
    return new ForceBurn__Params(this);
  }
}

export class ForceBurn__Params {
  _event: ForceBurn;

  constructor(event: ForceBurn) {
    this._event = event;
  }

  get issuer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get reason(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class ForceTransfer extends ethereum.Event {
  get params(): ForceTransfer__Params {
    return new ForceTransfer__Params(this);
  }
}

export class ForceTransfer__Params {
  _event: ForceTransfer;

  constructor(event: ForceTransfer) {
    this._event = event;
  }

  get issuer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class KyaUpdated extends ethereum.Event {
  get params(): KyaUpdated__Params {
    return new KyaUpdated__Params(this);
  }
}

export class KyaUpdated__Params {
  _event: KyaUpdated;

  constructor(event: KyaUpdated) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get kya(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class NewMaxArraySizeSet extends ethereum.Event {
  get params(): NewMaxArraySizeSet__Params {
    return new NewMaxArraySizeSet__Params(this);
  }
}

export class NewMaxArraySizeSet__Params {
  _event: NewMaxArraySizeSet;

  constructor(event: NewMaxArraySizeSet) {
    this._event = event;
  }

  get newMaxArraySize(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipHandoverCanceled extends ethereum.Event {
  get params(): OwnershipHandoverCanceled__Params {
    return new OwnershipHandoverCanceled__Params(this);
  }
}

export class OwnershipHandoverCanceled__Params {
  _event: OwnershipHandoverCanceled;

  constructor(event: OwnershipHandoverCanceled) {
    this._event = event;
  }

  get pendingOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipHandoverRequested extends ethereum.Event {
  get params(): OwnershipHandoverRequested__Params {
    return new OwnershipHandoverRequested__Params(this);
  }
}

export class OwnershipHandoverRequested__Params {
  _event: OwnershipHandoverRequested;

  constructor(event: OwnershipHandoverRequested) {
    this._event = event;
  }

  get pendingOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoleSet extends ethereum.Event {
  get params(): RoleSet__Params {
    return new RoleSet__Params(this);
  }
}

export class RoleSet__Params {
  _event: RoleSet;

  constructor(event: RoleSet) {
    this._event = event;
  }

  get holder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get role(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get active(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class TokenKyaUpdated extends ethereum.Event {
  get params(): TokenKyaUpdated__Params {
    return new TokenKyaUpdated__Params(this);
  }
}

export class TokenKyaUpdated__Params {
  _event: TokenKyaUpdated;

  constructor(event: TokenKyaUpdated) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get kya(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class TokenURIUpdated extends ethereum.Event {
  get params(): TokenURIUpdated__Params {
    return new TokenURIUpdated__Params(this);
  }
}

export class TokenURIUpdated__Params {
  _event: TokenURIUpdated;

  constructor(event: TokenURIUpdated) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SX1155NFT extends ethereum.SmartContract {
  static bind(address: Address): SX1155NFT {
    return new SX1155NFT("SX1155NFT", address);
  }

  DEFAULT_ADMIN_ROLE(): BigInt {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  EDITOR_ROLE(): BigInt {
    let result = super.call("EDITOR_ROLE", "EDITOR_ROLE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_EDITOR_ROLE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("EDITOR_ROLE", "EDITOR_ROLE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(owners: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    owners: Array<Address>,
    ids: Array<BigInt>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  commentatorByCommentsId(tokenId: BigInt, commentId: BigInt): Address {
    let result = super.call(
      "commentatorByCommentsId",
      "commentatorByCommentsId(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(commentId),
      ],
    );

    return result[0].toAddress();
  }

  try_commentatorByCommentsId(
    tokenId: BigInt,
    commentId: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "commentatorByCommentsId",
      "commentatorByCommentsId(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(commentId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  currentAttestationId(): BigInt {
    let result = super.call(
      "currentAttestationId",
      "currentAttestationId():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_currentAttestationId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentAttestationId",
      "currentAttestationId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentTokenId(): BigInt {
    let result = super.call("currentTokenId", "currentTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentTokenId",
      "currentTokenId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(holder: Address, role: BigInt): boolean {
    let result = super.call("hasRole", "hasRole(address,uint256):(bool)", [
      ethereum.Value.fromAddress(holder),
      ethereum.Value.fromUnsignedBigInt(role),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(holder: Address, role: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(address,uint256):(bool)", [
      ethereum.Value.fromAddress(holder),
      ethereum.Value.fromUnsignedBigInt(role),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  kya(): string {
    let result = super.call("kya", "kya():(string)", []);

    return result[0].toString();
  }

  try_kya(): ethereum.CallResult<string> {
    let result = super.tryCall("kya", "kya():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  maxArraySize(): BigInt {
    let result = super.call("maxArraySize", "maxArraySize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxArraySize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxArraySize", "maxArraySize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownershipHandoverExpiresAt(pendingOwner: Address): BigInt {
    let result = super.call(
      "ownershipHandoverExpiresAt",
      "ownershipHandoverExpiresAt(address):(uint256)",
      [ethereum.Value.fromAddress(pendingOwner)],
    );

    return result[0].toBigInt();
  }

  try_ownershipHandoverExpiresAt(
    pendingOwner: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownershipHandoverExpiresAt",
      "ownershipHandoverExpiresAt(address):(uint256)",
      [ethereum.Value.fromAddress(pendingOwner)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roleHolderAt(role: BigInt, i: BigInt): Address {
    let result = super.call(
      "roleHolderAt",
      "roleHolderAt(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(role),
        ethereum.Value.fromUnsignedBigInt(i),
      ],
    );

    return result[0].toAddress();
  }

  try_roleHolderAt(role: BigInt, i: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "roleHolderAt",
      "roleHolderAt(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(role),
        ethereum.Value.fromUnsignedBigInt(i),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  roleHolderCount(role: BigInt): BigInt {
    let result = super.call(
      "roleHolderCount",
      "roleHolderCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(role)],
    );

    return result[0].toBigInt();
  }

  try_roleHolderCount(role: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "roleHolderCount",
      "roleHolderCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roleHolders(role: BigInt): Array<Address> {
    let result = super.call("roleHolders", "roleHolders(uint256):(address[])", [
      ethereum.Value.fromUnsignedBigInt(role),
    ]);

    return result[0].toAddressArray();
  }

  try_roleHolders(role: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "roleHolders",
      "roleHolders(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenCommentByCommentId(tokenId: BigInt, commentId: BigInt): string {
    let result = super.call(
      "tokenCommentByCommentId",
      "tokenCommentByCommentId(uint256,uint256):(string)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(commentId),
      ],
    );

    return result[0].toString();
  }

  try_tokenCommentByCommentId(
    tokenId: BigInt,
    commentId: BigInt,
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "tokenCommentByCommentId",
      "tokenCommentByCommentId(uint256,uint256):(string)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(commentId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenKya(_id: BigInt): string {
    let result = super.call("tokenKya", "tokenKya(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id),
    ]);

    return result[0].toString();
  }

  try_tokenKya(_id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenKya", "tokenKya(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenUri(_id: BigInt): string {
    let result = super.call("tokenUri", "tokenUri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id),
    ]);

    return result[0].toString();
  }

  try_tokenUri(_id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenUri", "tokenUri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(_id: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_id),
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalTokenIdsSupply(_id: BigInt): BigInt {
    let result = super.call(
      "totalTokenIdsSupply",
      "totalTokenIdsSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)],
    );

    return result[0].toBigInt();
  }

  try_totalTokenIdsSupply(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalTokenIdsSupply",
      "totalTokenIdsSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(_id: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id),
    ]);

    return result[0].toString();
  }

  try_uri(_id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get tokenParams(): ConstructorCallTokenParamsStruct {
    return changetype<ConstructorCallTokenParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get _admin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _editor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallTokenParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get kya(): string {
    return this[2].toString();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class CancelOwnershipHandoverCall extends ethereum.Call {
  get inputs(): CancelOwnershipHandoverCall__Inputs {
    return new CancelOwnershipHandoverCall__Inputs(this);
  }

  get outputs(): CancelOwnershipHandoverCall__Outputs {
    return new CancelOwnershipHandoverCall__Outputs(this);
  }
}

export class CancelOwnershipHandoverCall__Inputs {
  _call: CancelOwnershipHandoverCall;

  constructor(call: CancelOwnershipHandoverCall) {
    this._call = call;
  }
}

export class CancelOwnershipHandoverCall__Outputs {
  _call: CancelOwnershipHandoverCall;

  constructor(call: CancelOwnershipHandoverCall) {
    this._call = call;
  }
}

export class CompleteOwnershipHandoverCall extends ethereum.Call {
  get inputs(): CompleteOwnershipHandoverCall__Inputs {
    return new CompleteOwnershipHandoverCall__Inputs(this);
  }

  get outputs(): CompleteOwnershipHandoverCall__Outputs {
    return new CompleteOwnershipHandoverCall__Outputs(this);
  }
}

export class CompleteOwnershipHandoverCall__Inputs {
  _call: CompleteOwnershipHandoverCall;

  constructor(call: CompleteOwnershipHandoverCall) {
    this._call = call;
  }

  get pendingOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CompleteOwnershipHandoverCall__Outputs {
  _call: CompleteOwnershipHandoverCall;

  constructor(call: CompleteOwnershipHandoverCall) {
    this._call = call;
  }
}

export class DeleteAttestationCall extends ethereum.Call {
  get inputs(): DeleteAttestationCall__Inputs {
    return new DeleteAttestationCall__Inputs(this);
  }

  get outputs(): DeleteAttestationCall__Outputs {
    return new DeleteAttestationCall__Outputs(this);
  }
}

export class DeleteAttestationCall__Inputs {
  _call: DeleteAttestationCall;

  constructor(call: DeleteAttestationCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get commentId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DeleteAttestationCall__Outputs {
  _call: DeleteAttestationCall;

  constructor(call: DeleteAttestationCall) {
    this._call = call;
  }
}

export class ForceBurnCall extends ethereum.Call {
  get inputs(): ForceBurnCall__Inputs {
    return new ForceBurnCall__Inputs(this);
  }

  get outputs(): ForceBurnCall__Outputs {
    return new ForceBurnCall__Outputs(this);
  }
}

export class ForceBurnCall__Inputs {
  _call: ForceBurnCall;

  constructor(call: ForceBurnCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get reason(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ForceBurnCall__Outputs {
  _call: ForceBurnCall;

  constructor(call: ForceBurnCall) {
    this._call = call;
  }
}

export class ForceBurnBatchCall extends ethereum.Call {
  get inputs(): ForceBurnBatchCall__Inputs {
    return new ForceBurnBatchCall__Inputs(this);
  }

  get outputs(): ForceBurnBatchCall__Outputs {
    return new ForceBurnBatchCall__Outputs(this);
  }
}

export class ForceBurnBatchCall__Inputs {
  _call: ForceBurnBatchCall;

  constructor(call: ForceBurnBatchCall) {
    this._call = call;
  }

  get _accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _quantities(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get reason(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ForceBurnBatchCall__Outputs {
  _call: ForceBurnBatchCall;

  constructor(call: ForceBurnBatchCall) {
    this._call = call;
  }
}

export class ForceTransferCall extends ethereum.Call {
  get inputs(): ForceTransferCall__Inputs {
    return new ForceTransferCall__Inputs(this);
  }

  get outputs(): ForceTransferCall__Outputs {
    return new ForceTransferCall__Outputs(this);
  }
}

export class ForceTransferCall__Inputs {
  _call: ForceTransferCall;

  constructor(call: ForceTransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ForceTransferCall__Outputs {
  _call: ForceTransferCall;

  constructor(call: ForceTransferCall) {
    this._call = call;
  }
}

export class GrantEditorRoleCall extends ethereum.Call {
  get inputs(): GrantEditorRoleCall__Inputs {
    return new GrantEditorRoleCall__Inputs(this);
  }

  get outputs(): GrantEditorRoleCall__Outputs {
    return new GrantEditorRoleCall__Outputs(this);
  }
}

export class GrantEditorRoleCall__Inputs {
  _call: GrantEditorRoleCall;

  constructor(call: GrantEditorRoleCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GrantEditorRoleCall__Outputs {
  _call: GrantEditorRoleCall;

  constructor(call: GrantEditorRoleCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class MakeAttestationCall extends ethereum.Call {
  get inputs(): MakeAttestationCall__Inputs {
    return new MakeAttestationCall__Inputs(this);
  }

  get outputs(): MakeAttestationCall__Outputs {
    return new MakeAttestationCall__Outputs(this);
  }
}

export class MakeAttestationCall__Inputs {
  _call: MakeAttestationCall;

  constructor(call: MakeAttestationCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get comment(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class MakeAttestationCall__Outputs {
  _call: MakeAttestationCall;

  constructor(call: MakeAttestationCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tokenURI(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintBatchCall extends ethereum.Call {
  get inputs(): MintBatchCall__Inputs {
    return new MintBatchCall__Inputs(this);
  }

  get outputs(): MintBatchCall__Outputs {
    return new MintBatchCall__Outputs(this);
  }
}

export class MintBatchCall__Inputs {
  _call: MintBatchCall;

  constructor(call: MintBatchCall) {
    this._call = call;
  }

  get _accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _quantities(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _tokenURIs(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }
}

export class MintBatchCall__Outputs {
  _call: MintBatchCall;

  constructor(call: MintBatchCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestOwnershipHandoverCall extends ethereum.Call {
  get inputs(): RequestOwnershipHandoverCall__Inputs {
    return new RequestOwnershipHandoverCall__Inputs(this);
  }

  get outputs(): RequestOwnershipHandoverCall__Outputs {
    return new RequestOwnershipHandoverCall__Outputs(this);
  }
}

export class RequestOwnershipHandoverCall__Inputs {
  _call: RequestOwnershipHandoverCall;

  constructor(call: RequestOwnershipHandoverCall) {
    this._call = call;
  }
}

export class RequestOwnershipHandoverCall__Outputs {
  _call: RequestOwnershipHandoverCall;

  constructor(call: RequestOwnershipHandoverCall) {
    this._call = call;
  }
}

export class RevokeEditorRoleCall extends ethereum.Call {
  get inputs(): RevokeEditorRoleCall__Inputs {
    return new RevokeEditorRoleCall__Inputs(this);
  }

  get outputs(): RevokeEditorRoleCall__Outputs {
    return new RevokeEditorRoleCall__Outputs(this);
  }
}

export class RevokeEditorRoleCall__Inputs {
  _call: RevokeEditorRoleCall;

  constructor(call: RevokeEditorRoleCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeEditorRoleCall__Outputs {
  _call: RevokeEditorRoleCall;

  constructor(call: RevokeEditorRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isApproved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetContractUriCall extends ethereum.Call {
  get inputs(): SetContractUriCall__Inputs {
    return new SetContractUriCall__Inputs(this);
  }

  get outputs(): SetContractUriCall__Outputs {
    return new SetContractUriCall__Outputs(this);
  }
}

export class SetContractUriCall__Inputs {
  _call: SetContractUriCall;

  constructor(call: SetContractUriCall) {
    this._call = call;
  }

  get _contractUri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractUriCall__Outputs {
  _call: SetContractUriCall;

  constructor(call: SetContractUriCall) {
    this._call = call;
  }
}

export class SetMaxArraySizeCall extends ethereum.Call {
  get inputs(): SetMaxArraySizeCall__Inputs {
    return new SetMaxArraySizeCall__Inputs(this);
  }

  get outputs(): SetMaxArraySizeCall__Outputs {
    return new SetMaxArraySizeCall__Outputs(this);
  }
}

export class SetMaxArraySizeCall__Inputs {
  _call: SetMaxArraySizeCall;

  constructor(call: SetMaxArraySizeCall) {
    this._call = call;
  }

  get _maxArraySize(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxArraySizeCall__Outputs {
  _call: SetMaxArraySizeCall;

  constructor(call: SetMaxArraySizeCall) {
    this._call = call;
  }
}

export class SetRoleCall extends ethereum.Call {
  get inputs(): SetRoleCall__Inputs {
    return new SetRoleCall__Inputs(this);
  }

  get outputs(): SetRoleCall__Outputs {
    return new SetRoleCall__Outputs(this);
  }
}

export class SetRoleCall__Inputs {
  _call: SetRoleCall;

  constructor(call: SetRoleCall) {
    this._call = call;
  }

  get holder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get role(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get active(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetRoleCall__Outputs {
  _call: SetRoleCall;

  constructor(call: SetRoleCall) {
    this._call = call;
  }
}

export class SetTokenUriCall extends ethereum.Call {
  get inputs(): SetTokenUriCall__Inputs {
    return new SetTokenUriCall__Inputs(this);
  }

  get outputs(): SetTokenUriCall__Outputs {
    return new SetTokenUriCall__Outputs(this);
  }
}

export class SetTokenUriCall__Inputs {
  _call: SetTokenUriCall;

  constructor(call: SetTokenUriCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _uri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetTokenUriCall__Outputs {
  _call: SetTokenUriCall;

  constructor(call: SetTokenUriCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
